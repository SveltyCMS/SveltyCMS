/**
 * @file vite.config.ts
 * @description This file contains the Vite configuration for the SvelteKit project, optimized for performance and developer experience.
 * It employs a unified config structure with conditional plugins for the initial setup wizard vs. normal development mode.
 *
 * Key Features:
 * - Centralized path management and logging utilities.
 * - Efficient, direct Hot Module Replacement (HMR) for roles and content structure without fake HTTP requests.
 * - Dynamic compilation of user-defined collections with real-time feedback.
 * - Seamless integration with Paraglide for i18n and svelte-email-tailwind for email templating.
 */

import { paraglideVitePlugin } from '@inlang/paraglide-js';
import { sveltekit } from '@sveltejs/kit/vite';
import { existsSync, promises as fs } from 'fs';
import { builtinModules } from 'module';
import path from 'path';
import svelteEmailTailwind from 'svelte-email-tailwind/vite';
import type { Plugin, UserConfig, ViteDevServer } from 'vite';
import { defineConfig } from 'vite';
import { compile } from './src/utils/compilation/compile';
import { isSetupComplete } from './src/utils/setupCheck';
import { securityCheckPlugin } from './src/utils/vitePluginSecurityCheck';
import { exec } from 'node:child_process';
import { platform } from 'node:os';

// Cross-platform open URL function (replaces 'open' package)
function openUrl(url: string) {
	const plat = platform();
	let cmd;
	if (plat === 'win32') {
		cmd = `start "" "${url}"`;
	} else if (plat === 'darwin') {
		cmd = `open "${url}"`;
	} else {
		cmd = `xdg-open "${url}"`;
	}
	exec(cmd);
}

// --- Constants & Configuration ---

const CWD = process.cwd();

const paths = {
	configDir: path.resolve(CWD, 'config'),
	privateConfig: path.resolve(CWD, 'config/private.ts'),
	userCollections: path.resolve(CWD, 'config/collections'),
	compiledCollections: path.resolve(CWD, 'compiledCollections'),
	roles: path.resolve(CWD, 'config/roles.ts'),
	widgets: path.resolve(CWD, 'src/widgets')
};

// --- Utilities ---
const useColor = process.stdout.isTTY;

/**
 * Standardized logger for build-time scripts, mimicking the main application logger's style.
 */
// Colored tag printed once so message-local color codes render correctly.
const TAG = useColor ? `\x1b[34m[SveltyCMS]\x1b[0m` : `[SveltyCMS]`;
const log = {
	// Info level — tag is blue, message follows (may contain its own color codes)
	info: (message: string) => console.log(`${TAG} ${message}`),
	// Custom success level for clarity in build process
	success: (message: string) => console.log(`${TAG} ${useColor ? `✅ \x1b[32m${message}\x1b[0m` : `✅ ${message}`}`),
	// Corresponds to 'warn' level
	warn: (message: string) => console.warn(`${TAG} ${useColor ? `⚠️ \x1b[33m${message}\x1b[0m` : `⚠️ ${message}`}`),
	// Corresponds to 'error' level
	error: (message: string, error?: unknown) => console.error(`${TAG} ${useColor ? `❌ \x1b[31m${message}\x1b[0m` : `❌ ${message}`}`, error ?? '')
};

/**
 * Ensures collection directories exist and performs an initial compilation if needed.
 * Creates placeholder files if no collections are found to prevent module import errors.
 */
let hasLoggedCollectionInit = false; // Prevent duplicate logs during multi-build

async function initializeCollectionsStructure() {
	await fs.mkdir(paths.userCollections, { recursive: true });
	await fs.mkdir(paths.compiledCollections, { recursive: true });

	const sourceFiles = (await fs.readdir(paths.userCollections, { recursive: true })).filter(
		(file): file is string => typeof file === 'string' && (file.endsWith('.ts') || file.endsWith('.js'))
	);

	if (sourceFiles.length > 0) {
		if (!hasLoggedCollectionInit) {
			log.info(`Found \x1b[32m${sourceFiles.length}\x1b[0m collection(s), compiling...`);
		}
		await compile({ userCollections: paths.userCollections, compiledCollections: paths.compiledCollections });
		if (!hasLoggedCollectionInit) {
			log.success('Initial collection compilation successful!');
			hasLoggedCollectionInit = true;
		}
	} else {
		if (!hasLoggedCollectionInit) {
			log.info('No user collections found. Creating placeholder structure.');
			hasLoggedCollectionInit = true;
		}
		const placeholderContent = '// This is a placeholder file generated by Vite.\nexport default {};';
		const collectionsDir = path.resolve(paths.compiledCollections, 'Collections');
		const menuDir = path.resolve(paths.compiledCollections, 'Menu');
		await fs.mkdir(collectionsDir, { recursive: true });
		await fs.mkdir(menuDir, { recursive: true });
		await fs.writeFile(path.resolve(collectionsDir, '_placeholder.js'), placeholderContent);
		await fs.writeFile(path.resolve(menuDir, '_placeholder.js'), placeholderContent);
	}
}

// Force exit on SIGINT to prevent hanging processes
process.on('SIGINT', () => {
	log.warn('\nReceived SIGINT, forcing exit...');
	process.exit(0);
});

// --- Vite Plugins ---
/**
 * A lightweight plugin to handle the initial setup wizard.
 * It creates a default private.ts and opens the setup page in the browser.
 */
function setupWizardPlugin(): Plugin {
	let wasPrivateConfigMissing = false;
	return {
		name: 'svelty-cms-setup-wizard',
		async buildStart() {
			// Check if private config exists before creating it
			wasPrivateConfigMissing = !existsSync(paths.privateConfig);

			// Ensure config directory and default private config exist.
			if (wasPrivateConfigMissing) {
				const content = `
/**
 * @file config/private.ts
 * @description Private configuration file containing essential bootstrap variables.
 * These values are required for the server to start and connect to the database.
 * This file will be populated during the initial setup process.
 */
import { createPrivateConfig } from '@src/databases/schemas';

export const privateEnv = createPrivateConfig({
	// --- Core Database Connection ---
	DB_TYPE: 'mongodb',
	DB_HOST: '',
	DB_PORT: 27017,
	DB_NAME: '',
	DB_USER: '',
	DB_PASSWORD: '',

	// --- Connection Behavior ---
	DB_RETRY_ATTEMPTS: 5,
	DB_RETRY_DELAY: 3000, // 3 seconds

	// --- Core Security Keys ---
	JWT_SECRET_KEY: '',
	ENCRYPTION_KEY: '',

	// --- Fundamental Architectural Mode ---
	MULTI_TENANT: false,

	/* * NOTE: All other settings (SMTP, Google OAuth, feature flags, etc.)
	 * are loaded dynamically from the database after the application starts.
	 */
});
`;
				try {
					await fs.mkdir(paths.configDir, { recursive: true });
					await fs.writeFile(paths.privateConfig, content);
					log.info('Created initial private config -> config/private.ts');
				} catch (e) {
					log.error('Failed to provision private config:', e);
				}
			}
			// Ensure collections are ready even in setup mode
			await initializeCollectionsStructure();
		},
		config: () => ({
			define: { __FRESH_INSTALL__: JSON.stringify(wasPrivateConfigMissing) }
		}),
		configureServer(server) {
			const originalListen = server.listen;
			server.listen = function (port?: number, isRestart?: boolean) {
				const result = originalListen.apply(this, [port, isRestart]);
				result.then(() => {
					setTimeout(async () => {
						const address = server.httpServer?.address();
						const resolvedPort = typeof address === 'object' && address ? address.port : 5173;
						const setupUrl = `http://localhost:${resolvedPort}/setup`;

						try {
							log.info(`Opening setup wizard in your browser...`);
							openUrl(setupUrl);
						} catch {
							const coloredUrl = useColor ? `\x1b[34m${setupUrl}\x1b[0m` : setupUrl;
							log.info(`Please open this URL to continue setup: ${coloredUrl}`);
						}
					}, 1000);
				});
				return result;
			};
		}
	};
}

/**
 * Plugin to watch for changes in collections, roles, and widgets, triggering
 * recompilation and efficient HMR updates.
 */
function cmsWatcherPlugin(): Plugin {
	let compileTimeout: NodeJS.Timeout;
	let widgetTimeout: NodeJS.Timeout; // Debounce timer for widgets

	const handleHmr = async (server: ViteDevServer, file: string) => {
		const isCollectionFile = file.startsWith(paths.userCollections) && /\.(ts|js)$/.test(file);
		const isRolesFile = file === paths.roles;
		const isWidgetFile = file.startsWith(paths.widgets) && (file.endsWith('index.ts') || file.endsWith('.svelte'));

		if (isCollectionFile) {
			clearTimeout(compileTimeout);
			compileTimeout = setTimeout(async () => {
				log.info(`Collection change detected. Recompiling...`);
				try {
					await compile({ userCollections: paths.userCollections, compiledCollections: paths.compiledCollections });
					log.success('Re-compilation successful!');

					// ✅ NEW: Register collection models in database after recompilation
					try {
						const { dbAdapter } = await server.ssrLoadModule('./src/databases/db.ts?t=' + Date.now());

						if (dbAdapter && dbAdapter.collection) {
							const { scanCompiledCollections } = await server.ssrLoadModule('./src/content/collectionScanner.ts?t=' + Date.now());
							const collections = await scanCompiledCollections();

							log.info(`Found ${collections.length} collections, registering models...`);

							// Register each collection sequentially with delay (prevent race condition)
							for (const schema of collections) {
								await dbAdapter.collection.createModel(schema);
								await new Promise((resolve) => setTimeout(resolve, 100)); // 100ms delay
							}

							log.success(`Collection models registered! (${collections.length} total)`);
						} else {
							log.warn('Database adapter not available, skipping model registration');
						}
					} catch (dbError) {
						log.error('Failed to register collection models (non-fatal):', dbError);
						// Don't fail the entire HMR process
					}

					const { generateContentTypes } = await server.ssrLoadModule('./src/content/vite.ts');
					await generateContentTypes(server);
					log.info('Content structure types regenerated.');
					server.ws.send({ type: 'full-reload', path: '*' });
				} catch (error) {
					log.error(`Error recompiling collections:`, error);
				}
			}, 150); // Debounce changes
		}

		if (isRolesFile) {
			log.info('Roles file changed. Performing HMR...');
			try {
				const { roles } = await server.ssrLoadModule('./config/roles.ts?t=' + Date.now());
				const { setLoadedRoles } = await server.ssrLoadModule('./src/auth/types.ts?t=' + Date.now());
				setLoadedRoles(roles);
				server.ws.send({ type: 'full-reload', path: '*' });
				log.success('Roles reloaded and client updated.');
			} catch (err) {
				log.error('Error reloading roles.ts:', err);
			}
		}

		// ---  WATCHER LOGIC  ---
		if (isWidgetFile) {
			clearTimeout(widgetTimeout);
			widgetTimeout = setTimeout(async () => {
				log.info(`Widget file change detected. Reloading widget store...`);
				try {
					// Invalidate and reload the widget store module to get the latest code
					const { widgetStoreActions } = await server.ssrLoadModule('./src/stores/widgetStore.svelte.ts?t=' + Date.now());

					// Call the reload action, which re-scans the filesystem
					await widgetStoreActions.reloadWidgets();

					// Trigger a full reload on the client to reflect the changes
					server.ws.send({ type: 'full-reload', path: '*' });
					log.success('Widgets reloaded and client updated.');
				} catch (err) {
					log.error('Error reloading widgets:', err);
				}
			}, 150); // Debounce changes
		}
	};

	return {
		name: 'svelty-cms-watcher',
		enforce: 'post',
		async buildStart() {
			await initializeCollectionsStructure();
		},
		configureServer(server) {
			server.watcher.on('all', (event, file) => {
				if (event === 'add' || event === 'change' || event === 'unlink') {
					handleHmr(server, file);
				}
			});
		}
	};
}

// --- Main Vite Configuration ---
const setupComplete = isSetupComplete();
const isBuild = process.env.NODE_ENV === 'production' || process.argv.includes('build');

export default defineConfig((): UserConfig => {
	// Only log during dev mode, not during builds
	if (!isBuild) {
		if (setupComplete) {
			log.success('Setup check passed. Initializing full dev environment...');
		} else {
			log.info('Starting in setup mode...');
		}
	}

	return {
		plugins: [
			// Security check plugin runs first to detect private setting imports
			securityCheckPlugin({
				failOnError: true,
				showWarnings: true,
				extensions: ['.svelte', '.ts', '.js']
			}),
			sveltekit(),
			!setupComplete ? setupWizardPlugin() : cmsWatcherPlugin(),
			paraglideVitePlugin({
				project: './project.inlang',
				outdir: './src/paraglide'
			}),
			svelteEmailTailwind({
				pathToEmailFolder: './src/components/emails'
			})
		],

		server: {
			fs: { allow: ['static', '.'] },
			watch: {
				// Prevent watcher from triggering on generated/sensitive files
				ignored: ['**/config/private.ts', '**/config/private.backup.*.ts', '**/compiledCollections/**']
			}
		},

		resolve: {
			alias: {
				'@root': path.resolve(CWD, './'),
				'@src': path.resolve(CWD, './src'),
				'@components': path.resolve(CWD, './src/components'),
				'@content': path.resolve(CWD, './src/content'),
				'@utils': path.resolve(CWD, './src/utils'),
				'@stores': path.resolve(CWD, './src/stores'),
				'@widgets': path.resolve(CWD, './src/widgets')
			}
		},

		define: {
			__FRESH_INSTALL__: false, // Default, may be overridden by setupWizardPlugin
			// NOTE: PKG_VERSION is now provided by the server at runtime from package.json
			// This ensures version always reflects installed package, not build-time snapshot
			// SUPERFORMS_LEGACY: true, // Uncomment if using older versions of Superforms
			// `global` polyfill for libraries that expect it (e.g., older crypto libs)
			global: 'globalThis'
		},

		build: {
			target: 'esnext',
			minify: 'esbuild',
			sourcemap: true,
			chunkSizeWarningLimit: 600, // Increase from 500KB (after optimizations)
			rollupOptions: {
				onwarn(warning, warn) {
					// Suppress circular dependency warnings from third-party libraries
					// These are internal to the libraries and don't affect functionality
					if (warning.code === 'CIRCULAR_DEPENDENCY') {
						// Check all possible fields where the path might be
						const ids = warning.ids || [];
						const message = warning.message || '';

						// Combine all text to check
						const allText = [message, ...ids].join(' ');

						// If it contains node_modules, it's a third-party circular dependency - suppress it
						if (allText.includes('node_modules')) {
							return;
						}
					}

					// Suppress unused external import warnings
					if (warning.code === 'UNUSED_EXTERNAL_IMPORT') {
						return;
					}

					// Suppress eval warnings from Vite (common in dev dependencies)
					if (warning.code === 'EVAL' && warning.id?.includes('node_modules')) {
						return;
					}

					// Suppress "dynamic import will not move module" warnings for known patterns
					// This happens when a module is both statically and dynamically imported
					// It's intentional in our architecture (eager + lazy loading patterns)
					if (warning.message?.includes('dynamic import will not move module')) {
						const knownPatterns = ['widgetStore.svelte.ts', 'richText/Input.svelte'];
						if (knownPatterns.some((pattern) => warning.message?.includes(pattern))) {
							return; // Suppress these specific warnings
						}
					}

					// Show all other warnings
					warn(warning);
				},
				external: [...builtinModules, ...builtinModules.map((m) => `node:${m}`), 'typescript', 'ts-node'],
				output: {
					// Optimized chunking for better caching and smaller initial load
					manualChunks: (id: string) => {
						// Only split vendor libraries (node_modules)
						if (id.includes('node_modules')) {
							// Rich text editors (TipTap, ProseMirror) - usually large (~150KB)
							if (id.includes('tiptap') || id.includes('prosemirror')) {
								return 'vendor-editor';
							}

							// Code editor (CodeMirror) - large (~100KB)
							if (id.includes('codemirror') || id.includes('@codemirror')) {
								return 'vendor-codemirror';
							}

							// Chart/visualization libraries
							if (id.includes('chart') || id.includes('d3')) {
								return 'vendor-charts';
							}

							// MongoDB/Mongoose - server-side only, shouldn't be in client bundle
							if (id.includes('mongodb') || id.includes('mongoose')) {
								return 'vendor-db';
							}

                            // Skeleton UI components
                            if (id.includes('@skeletonlabs/skeleton-svelte')) {
                                return 'skeleton-ui';
                            }

							// Svelte ecosystem (including SvelteKit to avoid circular deps)
							if (id.includes('svelte')) {
								return 'vendor-svelte';
							}

							// Everything else (core utilities)
							return 'vendor';
						}

						// Route-based code splitting for admin vs public routes
						// This keeps admin-heavy features separate from public pages
						if (id.includes('src/routes/(app)/dashboard')) {
							return 'route-dashboard';
						}
						if (id.includes('src/routes/(app)/config')) {
							return 'route-admin-config';
						}

						if (id.includes('src/routes/(app)/mediagallery')) {
							return 'route-media';
						}

						// Let Vite handle other application code automatically
					}
				}
			}
		},

		optimizeDeps: {
			exclude: [...builtinModules, ...builtinModules.map((m) => `node:${m}`)],
            include: ['@skeletonlabs/skeleton-svelte']
		}
	};
});
