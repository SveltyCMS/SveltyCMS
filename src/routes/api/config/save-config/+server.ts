/**
 * @file src/routes/api/save-config/+server.ts
 * @description API endpoint to safely save configuration changes.
 *
 * This is a full implementation that reads the current config,
 * merges the changes from the GUI, and then rewrites the .ts file,
 * preserving all existing values and structure.
 */
import { json } from '@sveltejs/kit';
import fs from 'fs/promises';
import path from 'path';
import { pathToFileURL } from 'url';

// Helper to get a fresh, non-cached module
async function importFresh(modulePath) {
	const fileUrl = pathToFileURL(modulePath).href;
	const module = await import(`${fileUrl}?v=${Date.now()}`);
	return module;
}

// Helpers to format the output .ts file content
const formatLine = (key, value) => {
	if (value === null || value === undefined) {
		return `// ${key}: undefined, // Optional: Uncomment and provide a value`;
	}
	if (typeof value === 'string') {
		return `${key}: '${String(value)}',`;
	}
	if (typeof value === 'boolean' || typeof value === 'number') {
		return `${key}: ${value},`;
	}
	// Handle objects and arrays by stringifying them
	return `${key}: ${JSON.stringify(value, null, 4)},`;
};

// Main function to generate the content of a config file
function generateConfigFileContent(configObjectName, createConfigFunctionName, config) {
	let content = `
/**
 * This file is managed by the SveltyCMS GUI.
 * Do not edit this file directly.
 * Use the System Settings page in the admin panel to make changes.
 */
import { ${createConfigFunctionName} } from './types';

export const ${configObjectName} = ${createConfigFunctionName}({
`;
	for (const [key, value] of Object.entries(config)) {
		content += `    ${formatLine(key, value)}\n`;
	}
	content += `});\n`;
	return content;
}

export async function POST({ request }) {
	const { configData, isPrivate } = await request.json();
	const configDir = path.join(process.cwd(), 'config');
	const filePath = path.join(configDir, isPrivate ? 'private.ts' : 'public.ts');

	try {
		// 1. Dynamically import the current configuration to get all existing values
		const currentConfigModule = await importFresh(filePath);
		const existingConfig = isPrivate ? currentConfigModule.privateEnv : currentConfigModule.publicEnv;

		// 2. Merge the changes from the GUI into the existing configuration
		const newConfig = { ...existingConfig, ...configData };

		// 3. Generate the new file content as a string
		const newFileContent = isPrivate
			? generateConfigFileContent('privateEnv', 'createPrivateConfig', newConfig)
			: generateConfigFileContent('publicEnv', 'createPublicConfig', newConfig);

		// 4. Write the new content back to the file, overwriting it
		await fs.writeFile(filePath, newFileContent, 'utf-8');

		console.log(`Successfully updated configuration file: ${filePath}`);
		return json({ success: true, message: 'Configuration saved successfully.' });

	} catch (error: any) {
		console.error(`Error saving configuration to ${filePath}:`, error);
		return json({ success: false, message: `Failed to save config: ${error.message}` }, { status: 500 });
	}
}

