/**
 * @file scripts/generate-config.js
 * @description Non-interactive config generator for CI and local automation.
 * It reads values from environment variables (with safe defaults) and
 * creates valid config/private.ts and config/public.ts by reusing the
 * existing CLI helper createOrUpdateConfigFile().
 */

import { createOrUpdateConfigFile } from '../cli-installer/createOrUpdateConfigFile.js';

// Helpers to parse env vars with sane defaults
const bool = (v, d = false) => {
  if (typeof v === 'boolean') return v;
  if (typeof v === 'string') return v.toLowerCase() === 'true';
  return d;
};
const num = (v, d) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : d;
};
const json = (v, d) => {
  if (!v) return d;
  try {
    const parsed = JSON.parse(v);
    return parsed;
  } catch {
    return d;
  }
};

// Build a minimal yet valid configuration that passes validation
const configData = {
  // --- Database ---
  DB_TYPE: process.env.DB_TYPE || 'mongodb',
  DB_HOST: process.env.DB_HOST || 'localhost',
  DB_PORT: num(process.env.DB_PORT, 27017),
  DB_NAME: process.env.DB_NAME || 'SveltyCMS',
  DB_USER: process.env.DB_USER || 'admin',
  DB_PASSWORD: process.env.DB_PASSWORD || 'admin',
  DB_RETRY_ATTEMPTS: num(process.env.DB_RETRY_ATTEMPTS, undefined),
  DB_RETRY_DELAY: num(process.env.DB_RETRY_DELAY, undefined),
  DB_POOL_SIZE: num(process.env.DB_POOL_SIZE, undefined),
  MULTI_TENANT: bool(process.env.MULTI_TENANT, false),

  // --- SMTP (optional) ---
  SMTP_HOST: process.env.SMTP_HOST,
  SMTP_PORT: num(process.env.SMTP_PORT, undefined),
  SMTP_EMAIL: process.env.SMTP_EMAIL,
  SMTP_PASSWORD: process.env.SMTP_PASSWORD,
  SERVER_PORT: num(process.env.SERVER_PORT, 4173),

  // --- OAuth/Redis/Other flags (default to disabled) ---
  USE_GOOGLE_OAUTH: bool(process.env.USE_GOOGLE_OAUTH, false),
  GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,

  USE_REDIS: bool(process.env.USE_REDIS, false),
  REDIS_HOST: process.env.REDIS_HOST,
  REDIS_PORT: num(process.env.REDIS_PORT, undefined),
  REDIS_PASSWORD: process.env.REDIS_PASSWORD,

  SESSION_CLEANUP_INTERVAL: num(process.env.SESSION_CLEANUP_INTERVAL, undefined),
  MAX_IN_MEMORY_SESSIONS: num(process.env.MAX_IN_MEMORY_SESSIONS, undefined),
  DB_VALIDATION_PROBABILITY: Number.isFinite(Number(process.env.DB_VALIDATION_PROBABILITY))
    ? Number(process.env.DB_VALIDATION_PROBABILITY)
    : undefined,
  SESSION_EXPIRATION_SECONDS: num(process.env.SESSION_EXPIRATION_SECONDS, undefined),

  USE_MAPBOX: bool(process.env.USE_MAPBOX, false),
  MAPBOX_API_TOKEN: process.env.MAPBOX_API_TOKEN,
  SECRET_MAPBOX_API_TOKEN: process.env.SECRET_MAPBOX_API_TOKEN,

  GOOGLE_API_KEY: process.env.GOOGLE_API_KEY,
  TWITCH_TOKEN: process.env.TWITCH_TOKEN,
  USE_TIKTOK: bool(process.env.USE_TIKTOK, false),
  TIKTOK_TOKEN: process.env.TIKTOK_TOKEN,

  LLM_APIS: json(process.env.LLM_APIS, {}),

  // Roles & Permissions with safe defaults
  ROLES: json(process.env.ROLES, undefined),
  PERMISSIONS: json(process.env.PERMISSIONS, undefined),

  // JWT secret is auto-generated by createOrUpdateConfigFile if missing
  JWT_SECRET_KEY: process.env.JWT_SECRET_KEY,

  // 2FA optional
  USE_2FA: bool(process.env.USE_2FA, false),
  TWO_FACTOR_AUTH_SECRET: process.env.TWO_FACTOR_AUTH_SECRET,
  TWO_FACTOR_AUTH_BACKUP_CODES_COUNT: num(process.env.TWO_FACTOR_AUTH_BACKUP_CODES_COUNT, undefined),

  // --- Public config ---
  SITE_NAME: process.env.SITE_NAME || 'SveltyCMS CI',
  PASSWORD_LENGTH: num(process.env.PASSWORD_LENGTH, 8),

  DEFAULT_CONTENT_LANGUAGE: process.env.DEFAULT_CONTENT_LANGUAGE || 'en',
  AVAILABLE_CONTENT_LANGUAGES: json(process.env.AVAILABLE_CONTENT_LANGUAGES, ['en', 'de']),
  BASE_LOCALE: process.env.BASE_LOCALE || 'en',
  LOCALES: json(process.env.LOCALES, ['en', 'de']),

  MEDIA_FOLDER: process.env.MEDIA_FOLDER || 'ci-media-files',
  MEDIA_OUTPUT_FORMAT_QUALITY: json(process.env.MEDIA_OUTPUT_FORMAT_QUALITY, { format: 'avif', quality: 80 }),
  MEDIASERVER_URL: process.env.MEDIASERVER_URL,
  IMAGE_SIZES: json(process.env.IMAGE_SIZES, { sm: 600, md: 900, lg: 1200 }),
  MAX_FILE_SIZE: num(process.env.MAX_FILE_SIZE, undefined),
  BODY_SIZE_LIMIT: num(process.env.BODY_SIZE_LIMIT, undefined),
  EXTRACT_DATA_PATH: process.env.EXTRACT_DATA_PATH,
  USE_ARCHIVE_ON_DELETE: bool(process.env.USE_ARCHIVE_ON_DELETE, true),

  HOST_DEV: process.env.HOST_DEV || 'http://localhost:5173',
  HOST_PROD: process.env.HOST_PROD || 'http://localhost:4173',

  LOG_LEVELS: json(process.env.LOG_LEVELS, ['info', 'warn', 'error']),
  LOG_RETENTION_DAYS: num(process.env.LOG_RETENTION_DAYS, undefined),
  LOG_ROTATION_SIZE: num(process.env.LOG_ROTATION_SIZE, undefined),

  SEASONS: bool(process.env.SEASONS, false),
  SEASON_REGION: process.env.SEASON_REGION,

  DEMO: bool(process.env.DEMO, false)
};

await createOrUpdateConfigFile(configData);
console.log('âœ… Generated config/private.ts and config/public.ts');
